package com.myweb.www.controller;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.myweb.www.domain.BoardDTO;
import com.myweb.www.domain.BoardVO;
import com.myweb.www.domain.FileVO;
import com.myweb.www.domain.PagingVO;
import com.myweb.www.handler.FileHandler;
import com.myweb.www.handler.PagingHandler;
import com.myweb.www.service.BoardService;

import lombok.extern.slf4j.Slf4j;

@Controller
@RequestMapping("/board/*") // 매핑
@Slf4j
public class BoardController {
// 폴더명 : board / mapping : board
	//mapping => /board/register
	//목적지 -> /board/register
	
	
	@Inject // 언어테이션으로 new 대신 생성해줌
	private BoardService bsv;
	
	@Inject 
	private FileHandler fh;
	
	@GetMapping("/register")
	public String boardregisterGet() {
		return "/board/register";
	}
	
	/*  파일 때문에 수정중
	 * @PostMapping("/register") public String register(BoardVO bvo) {
	 * log.info(">>>>>>>> bvo "+bvo); int isOK = bsv.register(bvo);
	 * log.info(">>>> board register >>"+(isOK>0? "ok" : "fail")); return "index"; }
	 */
	
	@PostMapping("/register")
	public String register(BoardVO bvo, @RequestParam(name="files", required = false)MultipartFile[] files) {
		log.info(">>>>>>>> bvo "+bvo + "files >>>" + files);
		List<FileVO> flist = new ArrayList<FileVO>();
		//file upload handler 생성
		if(files[0].getSize() > 0) {
			flist = fh.uploadFiles(files);
		}
		
		int isOK = bsv.register(new BoardDTO(bvo, flist));
		
		log.info(">>>> board register >>"+(isOK>0? "ok" : "fail"));
		
		return "index";
	}
	
	
	/*
	 * //board리스트
	 * 
	 * @GetMapping("/list") 
	 * public String list(Model model) {
	 * items="${list }" 쓰려고 model 객체로 보냄 list는 받을 필요없음
	 * List<BoardVO> list = model.addAttribute("list", bsv.getList());
	 * return "/board/list"; }
	 */
	
	
	@GetMapping("/list")
	public void list(Model m, PagingVO pagingVO) {
		//pagingVO 이거는 mapper에 limit을 하기위해 받음 
		log.info(">>>>> pagingVO" + pagingVO);
//		m.addAttribute("list", bsv.getList(pagingVO));
		m.addAttribute("list", bsv.getList(pagingVO));
		//페이징 처리
		//총페이지 갯수 (totalCount) (검색포함)
		int totalCount = bsv.getTotalCount(pagingVO);
		//뭘 주고 받는다 느낌 ?
		PagingHandler ph = new PagingHandler(pagingVO, totalCount);
		m.addAttribute("ph", ph);
		
		
	}
	
	
	
	@GetMapping({"/detail", "/modify"})
	public void detail(Model model, @RequestParam("bno")int bno) {
		log.info("디테일 bno확인 " + bno);
		/*
		 * BoardVO bvo = bsv.getDetail(bno); log.info("디테일 확인 bvo" + bvo);
		 */
		/* model.addAttribute("bvo", bvo); */
		BoardDTO bdto = new BoardDTO(bsv.getDetail(bno), bsv.getFileList(bno));
		model.addAttribute("bdto", bdto);
	}
	
	@PostMapping("/modify")
	public String modify(RedirectAttributes re, BoardVO bvo,
			@RequestParam(name="files", required = false)MultipartFile[] files) {
		log.info("모디파이 bno 확인" + bvo);
		
		
		
		
		int isOK = bsv.postModify(bvo);
		re.addAttribute("bno", bvo.getBno());
		re.addFlashAttribute("isMod", isOK);
		//flash로 보내면 잠깐 보냈다가 사라지는 역활
		return "redirect:/board/detail";
	}
	
	@GetMapping("/remove")
	public String remove(@RequestParam("bno")int bno, RedirectAttributes reAttr) {
		
		log.info(">>>> remove bno >>>" + bno);
		int isOK = bsv.remove(bno);
		log.info("isOK >>>" + isOK );
		return "redirect:/board/list";	
		//redirect가 없으면 값을 못찾으니까 redirect를 사용하면 listboardlist를 걸쳐서 간다
	}
	
	
	
	@DeleteMapping(value="/{uuid}", produces = MediaType.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> dele(@PathVariable("uuid")String fno) {
		log.info("uuid 들어옴 ?" + fno);
		
		int isOK = bsv.dele(fno);
		log.info("isOK >>>" + isOK );
		return isOK > 0 ? new ResponseEntity<String>("1", HttpStatus.OK)
				: new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
	}
}
