package com.myweb.www.handler;

import java.io.File;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import com.myweb.www.domain.FileVO;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class FileHandler {
	
	private final String UP_DIR = "D:\\_myweb\\_java\\fileUpload";
	
	public List<FileVO> uploadFiles(MultipartFile[] files) {
		
		List<FileVO> flist = new ArrayList<>();
		//파일경로, fvo set, 파일저장 ....
		//날짜를 폴더로 생성하여 그날그날 업로드 파일을 관리
		
		LocalDate date = LocalDate.now(); //localDate 객체
		
		String today = date.toString(); // 2023-10-24
		
		today = today.replace("-", File.separator); //2023년\10\24(win) 2023\/10/24(linux, mac)
	
		File folders = new File(UP_DIR, today);
		
		if(!folders.exists() ) {
			//폴더에 exists 없다면
			folders.mkdirs();
		}
		
		
		
		//files 객체에 대한 설정
		for(MultipartFile file : files) { //들어온 첨부파일 1개씩 for문 처리
			FileVO fvo = new FileVO();
			
			fvo.setSaveDir(today);
			
			fvo.setFileSize(file.getSize());
			
			String orginalFileName = file.getOriginalFilename();
			
			log.info(">>>>>>> orginal >>>" + orginalFileName);
			
			String fileName = orginalFileName.substring(orginalFileName.lastIndexOf(File.separator)+1);
			
			log.info(">>>>>>> filename >>>" +fileName);
			
			
			
			fvo.setFileName(fileName);
			
			UUID uuid = UUID.randomUUID();
			
			fvo.setUuid(uuid.toString());
			
			//기본 FileVO 생성 -----------------------------------------------------
			
			//하단부터 디스크에 저장할 파일 객체 생성
			//파일이름 uuid_fileName uuid_th_fileName
			
			String fullFileName = uuid.toString()+"_"+fileName;
			
			File storeFile = new File(folders, fullFileName);
			//file 객체가 저장이 되려면 처음 경로부터 다 설정이 되어있어야함.
			// D:\\_myweb\\_java\\fileUpload\\2023\\10\\24\\uuid_fileName.jpg
			
			try {
				file.transferTo(storeFile); // 저장
			} catch (Exception e) {
				// TODO: handle exception
				log.debug(">>>> file 생성 오류~!!");
				e.printStackTrace();
			}
			
		}
		
		
		
		
		
		
		
		
		
		
		
		return flist;
	}
	
}
